mod cache;
mod core;
mod emitter;
mod files;
mod schema;
#[cfg(test)]
mod tests;
mod utils;
mod watcher;

use core::core_state::CoreStateManager;
use std::{collections::HashMap, path::PathBuf};

use cache::query::{
    get_all_folders, get_all_folders_by_schema, get_all_tags, get_files_by_path,
    FolderListGetResult, RecordFromDb, RecordListGetResult,
};
use files::read_save::{
    read_file_by_path, save_file, FileReadMode, RecordReadResult, RecordSaveResult,
};
use schema::schema_cache::SchemaResult;
use schema::types::Schema;
use serde::Serialize;
use tauri::test::{mock_builder, MockRuntime};
use tauri::{AppHandle, Manager};
use tokio::runtime::Runtime;
use ts_rs::TS;
use utils::errorhandling::ErrFR;

use crate::utils::helpers::{get_breadcrumb_items, normalize_path_to_os, FileBreadCrumbs};

/*
  Define types and pack them into IPCResponces, which gets exported to TS types
*/

#[derive(TS, Serialize)]
#[ts(export)]
struct IPCReadFileByPathResult {
    record: RecordReadResult,
    breadcrumb_items: FileBreadCrumbs,
}

type IPCInit = Result<Option<String>, Box<ErrFR>>;
type IPCGetFilesPath = Result<RecordListGetResult, Box<ErrFR>>;
type IPCGetRootPath = Result<Option<String>, Box<ErrFR>>;
type IPCGetAllTags = Result<Vec<String>, Box<ErrFR>>;
type IPCGetAllFolders = Result<FolderListGetResult, Box<ErrFR>>;
type IPCGetAllFoldersBySchema = Result<FolderListGetResult, Box<ErrFR>>;
type IPCReadFileByPath = Result<IPCReadFileByPathResult, Box<ErrFR>>;
type IPCGetSchemas = Result<HashMap<String, Schema>, Box<ErrFR>>;
type IPCLoadSchema = Result<Schema, Box<ErrFR>>;
type IPCSaveSchema = Result<Schema, Box<ErrFR>>;
type IPCSaveFile = Result<RecordSaveResult, Box<ErrFR>>;
type IPCResolveSchemaPath = Result<Option<SchemaResult>, Box<ErrFR>>;
type IPCDeleteFile = Result<(), Box<ErrFR>>;
#[derive(TS)]
#[ts(export)]
#[allow(dead_code)]
struct IPCResponces {
    /* These types are visible on frontend (generated by ts-rs from this struct content) */
    c_init: IPCInit,
    c_get_root_path: IPCGetRootPath,
    c_get_files_by_path: IPCGetFilesPath,
    c_get_all_tags: IPCGetAllTags,
    c_get_all_folders: IPCGetAllFolders,
    c_get_all_folders_by_schema: IPCGetAllFoldersBySchema,
    c_read_file_by_path: IPCReadFileByPath,
    c_get_schemas_usable: IPCGetSchemas,
    c_get_schemas_all: IPCGetSchemas,
    c_load_schema: IPCLoadSchema,
    c_save_schema: IPCSaveSchema,
    c_save_file: IPCSaveFile,
    c_resolve_schema_path: IPCResolveSchemaPath,
    c_delete_to_trash: IPCDeleteFile,
}

#[tauri::command]
async fn c_init<T: tauri::Runtime>(app: AppHandle<T>) -> IPCInit {
    let core = app.state::<CoreStateManager>();
    core.init(&app).await?;
    core.init_cache_on_root(&app).await?;
    Ok(core.context.cached_root_path().await)
}

#[tauri::command]
async fn c_get_root_path<T: tauri::Runtime>(app: AppHandle<T>) -> IPCGetRootPath {
    let core = app.state::<CoreStateManager>();
    core.load_root_path_from_store(&app).await
}

#[tauri::command]
async fn c_get_files_by_path<T: tauri::Runtime>(
    app: AppHandle<T>,
    path_relative: String,
) -> IPCGetFilesPath {
    let core = app.state::<CoreStateManager>();
    let normalized_path = normalize_path_to_os(&path_relative);
    get_files_by_path(&core.context, &normalized_path).await
}

#[tauri::command]
async fn c_get_all_tags<T: tauri::Runtime>(app: AppHandle<T>) -> IPCGetAllTags {
    let core = app.state::<CoreStateManager>();
    get_all_tags(&core.context)
        .await
        .map_err(|e| Box::new(ErrFR::new("Error when getting all tags").raw(e)))
}

#[tauri::command]
async fn c_get_all_folders<T: tauri::Runtime>(app: AppHandle<T>) -> IPCGetAllFolders {
    let core = app.state::<CoreStateManager>();
    get_all_folders(&core.context).await
}

#[tauri::command]
async fn c_get_all_folders_by_schema<T: tauri::Runtime>(
    app: AppHandle<T>,
    schema_path: String,
) -> IPCGetAllFoldersBySchema {
    let core = app.state::<CoreStateManager>();
    let normalized_path = normalize_path_to_os(&schema_path);
    get_all_folders_by_schema(&core.context, &normalized_path).await
}

#[tauri::command]
async fn c_read_file_by_path<T: tauri::Runtime>(
    app: AppHandle<T>,
    path: String,
) -> IPCReadFileByPath {
    let core = app.state::<CoreStateManager>();
    let normalized_path = normalize_path_to_os(&path);
    let file = read_file_by_path(&core.context, &normalized_path, FileReadMode::FullFile).await?;
    let breadcrumb_items = get_breadcrumb_items(&file);
    Ok(IPCReadFileByPathResult {
        record: file,
        breadcrumb_items,
    })
}

#[tauri::command]
async fn c_get_schemas_all<T: tauri::Runtime>(app: AppHandle<T>) -> IPCGetSchemas {
    let core = app.state::<CoreStateManager>();
    let schemas = core
        .context
        .schemas_cache
        .get_schemas_list_with_empty()
        .await;
    Ok(schemas)
}

// This one returns only schemas with items
#[tauri::command]
async fn c_get_schemas_usable<T: tauri::Runtime>(app: AppHandle<T>) -> IPCGetSchemas {
    let core = app.state::<CoreStateManager>();
    let schemas = core.context.schemas_cache.get_schemas_list().await;
    Ok(schemas)
}

#[tauri::command]
async fn c_load_schema<T: tauri::Runtime>(app: AppHandle<T>, path: String) -> IPCLoadSchema {
    let core = app.state::<CoreStateManager>();
    let ctx = &core.context;

    let normalized_path = normalize_path_to_os(&path);

    // TODO?: This reads schema from disk, not sure if this needed really
    match core
        .context
        .schemas_cache
        .cache_schema_absolute_path(ctx, ctx.relative_path_to_absolute(&normalized_path).await?)
        .await
    {
        Ok(Some(v)) => Ok(v),
        Ok(None) => Err(Box::new(ErrFR::new("Schema not found").info(&path))),
        Err(e) => Err(e),
    }
}

#[tauri::command]
async fn c_save_schema<T: tauri::Runtime>(
    app: AppHandle<T>,
    path: String,
    schema: Schema,
) -> IPCSaveSchema {
    let core = app.state::<CoreStateManager>();
    let ctx = &core.context;
    let normalized_path = normalize_path_to_os(&path);
    core.context
        .schemas_cache
        .save_schema(ctx, &normalized_path, schema)
        .await
}

#[tauri::command]
async fn c_save_file<T: tauri::Runtime>(
    app: AppHandle<T>,
    record: RecordFromDb,
    forced: bool,
    create_new: bool,
) -> IPCSaveFile {
    let core = app.state::<CoreStateManager>();
    save_file(&core.context, record, forced, create_new).await
}

#[tauri::command]
async fn c_resolve_schema_path<T: tauri::Runtime>(
    app: AppHandle<T>,
    path: String,
) -> IPCResolveSchemaPath {
    let core = app.state::<CoreStateManager>();
    Ok(core
        .context
        .schemas_cache
        .get_schema(&PathBuf::from(path))
        .await)
}

#[tauri::command]
async fn c_delete_to_trash<T: tauri::Runtime>(_: AppHandle<T>, path: String) -> IPCDeleteFile {
    trash::delete(&path).map_err(|e| Box::new(ErrFR::new("Failed to delete file").raw(e)))
}

pub fn create_app<T: tauri::Runtime>(builder: tauri::Builder<T>) -> tauri::App<T> {
    builder
        .plugin(tauri_plugin_sql::Builder::new().build())
        .plugin(tauri_plugin_dialog::init())
        .plugin(tauri_plugin_fs::init())
        .plugin(tauri_plugin_store::Builder::new().build())
        .invoke_handler(tauri::generate_handler![
            c_init,
            c_get_root_path,
            c_load_schema,
            c_save_schema,
            c_get_files_by_path,
            c_get_all_tags,
            c_get_all_folders,
            c_get_all_folders_by_schema,
            c_read_file_by_path,
            c_save_file,
            c_get_schemas_usable,
            c_get_schemas_all,
            c_resolve_schema_path,
            c_delete_to_trash,
        ])
        .setup(|app| {
            if cfg!(debug_assertions) {
                app.handle().plugin(
                    tauri_plugin_log::Builder::default()
                        .level(log::LevelFilter::Info)
                        .build(),
                )?;
            }

            let mut state = CoreStateManager::new();
            let rt = Runtime::new().unwrap();
            rt.block_on(async {
                #[cfg(debug_assertions)]
                {
                    state.context.database_conn.init_in_folder().await;
                }
                #[cfg(not(debug_assertions))]
                {
                    state.context.database_conn.init_in_memory().await;
                }
            });

            app.manage(state);
            Ok(())
        })
        .build(tauri::generate_context!())
        .expect("error while running tauri application")
}

pub fn run() {
    create_app(
        tauri::Builder::default()
            .plugin(tauri_plugin_process::init())
            .plugin(tauri_plugin_updater::Builder::new().build())
            .plugin(tauri_plugin_http::init())
            .plugin(tauri_plugin_opener::init())
            .plugin(tauri_plugin_os::init()),
    )
    .run(|_, _| {});
}

pub fn create_mock_app() -> tauri::App<MockRuntime> {
    create_app(mock_builder())
}
